type Author implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  firstName: String
  lastName: String

  """Reads and enables pagination through a set of `Media`."""
  mediaByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection!

  """Reads and enables pagination through a set of `Media`."""
  mediaByAuthorIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): [Media!]!
}

"""
A condition to be used against `Author` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AuthorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String
}

"""An input for mutations affecting `Author`"""
input AuthorInput {
  id: Int
  firstName: String
  lastName: String
}

"""
Represents an update to a `Author`. Fields that are set will be updated.
"""
input AuthorPatch {
  id: Int
  firstName: String
  lastName: String
}

"""A connection to a list of `Author` values."""
type AuthorsConnection {
  """A list of `Author` objects."""
  nodes: [Author]!

  """
  A list of edges which contains the `Author` and cursor to aid in pagination.
  """
  edges: [AuthorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Author` you could get from the connection."""
  totalCount: Int
}

"""A `Author` edge in the connection."""
type AuthorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Author` at the end of the edge."""
  node: Author
}

"""Methods to use when ordering `Author`."""
enum AuthorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Author` mutation."""
input CreateAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Author` to be created by this mutation."""
  author: AuthorInput!
}

"""The output of our create `Author` mutation."""
type CreateAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Author` that was created by this mutation."""
  author: Author

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Author`. May be used by Relay 1."""
  authorEdge(
    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = PRIMARY_KEY_ASC
  ): AuthorsEdge
}

"""All input for the create `Media` mutation."""
input CreateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Media` to be created by this mutation."""
  media: MediaInput!
}

"""The output of our create `Media` mutation."""
type CreateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was created by this mutation."""
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Author` that is related to this `Media`."""
  authorByAuthorId: Author

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = PRIMARY_KEY_ASC
  ): MediaEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteAuthorById` mutation."""
input DeleteAuthorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAuthor` mutation."""
input DeleteAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Author` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Author` mutation."""
type DeleteAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Author` that was deleted by this mutation."""
  author: Author
  deletedAuthorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Author`. May be used by Relay 1."""
  authorEdge(
    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = PRIMARY_KEY_ASC
  ): AuthorsEdge
}

"""All input for the `deleteMediaById` mutation."""
input DeleteMediaByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMedia` mutation."""
input DeleteMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Media` mutation."""
type DeleteMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was deleted by this mutation."""
  media: Media
  deletedMediaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Author` that is related to this `Media`."""
  authorByAuthorId: Author

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = PRIMARY_KEY_ASC
  ): MediaEdge
}

type Media implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String
  description: String
  caption: String
  uri: String
  authorId: Int
  ratio: Ratio
  type: Type

  """Reads a single `Author` that is related to this `Media`."""
  authorByAuthorId: Author
}

"""
A condition to be used against `Media` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MediaCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `caption` field."""
  caption: String

  """Checks for equality with the object’s `uri` field."""
  uri: String

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `ratio` field."""
  ratio: Ratio

  """Checks for equality with the object’s `type` field."""
  type: Type
}

"""A connection to a list of `Media` values."""
type MediaConnection {
  """A list of `Media` objects."""
  nodes: [Media]!

  """
  A list of edges which contains the `Media` and cursor to aid in pagination.
  """
  edges: [MediaEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Media` you could get from the connection."""
  totalCount: Int
}

"""A `Media` edge in the connection."""
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Media` at the end of the edge."""
  node: Media
}

"""An input for mutations affecting `Media`"""
input MediaInput {
  id: Int
  title: String
  description: String
  caption: String
  uri: String
  authorId: Int
  ratio: Ratio
  type: Type
}

"""Methods to use when ordering `Media`."""
enum MediaOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CAPTION_ASC
  CAPTION_DESC
  URI_ASC
  URI_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  RATIO_ASC
  RATIO_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Media`. Fields that are set will be updated.
"""
input MediaPatch {
  id: Int
  title: String
  description: String
  caption: String
  uri: String
  authorId: Int
  ratio: Ratio
  type: Type
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Author`."""
  createAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAuthorInput!
  ): CreateAuthorPayload

  """Creates a single `Media`."""
  createMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaInput!
  ): CreateMediaPayload

  """Updates a single `Author` using its globally unique id and a patch."""
  updateAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuthorInput!
  ): UpdateAuthorPayload

  """Updates a single `Author` using a unique key and a patch."""
  updateAuthorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuthorByIdInput!
  ): UpdateAuthorPayload

  """Updates a single `Media` using its globally unique id and a patch."""
  updateMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaInput!
  ): UpdateMediaPayload

  """Updates a single `Media` using a unique key and a patch."""
  updateMediaById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaByIdInput!
  ): UpdateMediaPayload

  """Deletes a single `Author` using its globally unique id."""
  deleteAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuthorInput!
  ): DeleteAuthorPayload

  """Deletes a single `Author` using a unique key."""
  deleteAuthorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuthorByIdInput!
  ): DeleteAuthorPayload

  """Deletes a single `Media` using its globally unique id."""
  deleteMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaInput!
  ): DeleteMediaPayload

  """Deletes a single `Media` using a unique key."""
  deleteMediaById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaByIdInput!
  ): DeleteMediaPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Author`."""
  allAuthors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthorCondition
  ): AuthorsConnection

  """Reads a set of `Author`."""
  allAuthorsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuthorCondition
  ): [Author!]

  """Reads and enables pagination through a set of `Media`."""
  allMedia(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection

  """Reads a set of `Media`."""
  allMediaList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): [Media!]
  authorById(id: Int!): Author
  mediaById(id: Int!): Media

  """Reads a single `Author` using its globally unique `ID`."""
  author(
    """The globally unique `ID` to be used in selecting a single `Author`."""
    nodeId: ID!
  ): Author

  """Reads a single `Media` using its globally unique `ID`."""
  media(
    """The globally unique `ID` to be used in selecting a single `Media`."""
    nodeId: ID!
  ): Media
}

enum Ratio {
  LANDSCAPE
  PORTRAIT
  SQUARE
}

enum Type {
  AUDIO
  DOCUMENT
  IMAGE
  VIDEO
}

"""All input for the `updateAuthorById` mutation."""
input UpdateAuthorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Author` being updated.
  """
  authorPatch: AuthorPatch!
  id: Int!
}

"""All input for the `updateAuthor` mutation."""
input UpdateAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Author` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Author` being updated.
  """
  authorPatch: AuthorPatch!
}

"""The output of our update `Author` mutation."""
type UpdateAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Author` that was updated by this mutation."""
  author: Author

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Author`. May be used by Relay 1."""
  authorEdge(
    """The method to use when ordering `Author`."""
    orderBy: [AuthorsOrderBy!] = PRIMARY_KEY_ASC
  ): AuthorsEdge
}

"""All input for the `updateMediaById` mutation."""
input UpdateMediaByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  mediaPatch: MediaPatch!
  id: Int!
}

"""All input for the `updateMedia` mutation."""
input UpdateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  mediaPatch: MediaPatch!
}

"""The output of our update `Media` mutation."""
type UpdateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was updated by this mutation."""
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Author` that is related to this `Media`."""
  authorByAuthorId: Author

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = PRIMARY_KEY_ASC
  ): MediaEdge
}
